{"version":3,"sources":["components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","onSelectUser","selectedUserId","className","map","todo","rootClasses","completed","push","buttonClasses","userId","join","type","readOnly","checked","title","onClick","id","CurrentUser","state","user","fetch","this","props","then","response","json","setState","prevProps","name","email","phone","onClearUser","React","Component","App","searchQuery","selectedStatus","selectUser","clearUser","getTodosList","filter","toLocaleLowerCase","includes","handleSearchQuery","value","handleSelectedStatus","event","target","query","visibleTodos","placeholder","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6f050ae.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport { Todo } from '../../types';\n\ninterface Props {\n  todos: Todo[];\n  onSelectUser(userId: number): void;\n  selectedUserId: number;\n}\n\nexport const TodoList: React.FC<Props> = ({ todos, onSelectUser, selectedUserId }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map((todo) => {\n          const rootClasses = ['TodoList__item'];\n\n          if (todo.completed) {\n            rootClasses.push('TodoList__item--checked');\n          } else {\n            rootClasses.push('TodoList__item--unchecked');\n          }\n\n          const buttonClasses = ['TodoList__user-button', 'button'];\n\n          if (selectedUserId === todo.userId) {\n            buttonClasses.push('TodoList__user-button--selected');\n          }\n\n          return (\n            <li key={todo.id} className={rootClasses.join(' ')}>\n              <input type=\"checkbox\" readOnly checked={todo.completed} />\n              <p>{todo.title}</p>\n\n              <button\n                className={buttonClasses.join(' ')}\n                type=\"button\"\n                onClick={() => onSelectUser(todo.userId)}\n              >\n                User&nbsp;#\n                {todo.userId}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { User } from '../../types';\n\ninterface Props {\n  userId: number;\n  onClearUser: () => void;\n}\n\ninterface State {\n  user: User | null;\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    fetch(`https://mate.academy/students-api/users/${this.props.userId}`)\n      .then(response => response.json())\n      .then(user => this.setState({ user }));\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      fetch(`https://mate.academy/students-api/users/${this.props.userId}`)\n        .then(response => response.json())\n        .then(user => this.setState({ user }));\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      user && (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>{`Selected user: ${user.id}`}</span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            {user.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {user.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {user.phone}\n          </p>\n\n          <button\n            className=\"CurrentUser__button button\"\n            type=\"button\"\n            onClick={this.props.onClearUser}\n          >\n            Clear\n          </button>\n        </div>\n      )\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { Todo } from './types';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  searchQuery: string;\n  selectedStatus: 'all' | 'active' | 'completed';\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    searchQuery: '',\n    selectedStatus: 'all',\n  };\n\n  componentDidMount() {\n    fetch('https://mate.academy/students-api/todos')\n      .then(response => response.json())\n      .then(todos => this.setState({ todos }));\n  }\n\n  selectUser = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  getTodosList = (searchQuery: string) => (\n    this.state.todos.filter(todo => {\n      return todo.title.toLocaleLowerCase().includes(searchQuery)\n        && (this.state.selectedStatus === 'all'\n          ? true\n          : todo.completed === (this.state.selectedStatus === 'completed'));\n    })\n  );\n\n  handleSearchQuery = (value:string) => {\n    this.setState({ searchQuery: value });\n  };\n\n  handleSelectedStatus = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    if (value === 'all' || value === 'completed' || value === 'active') {\n      this.setState({ selectedStatus: value });\n    }\n  };\n\n  render() {\n    const { selectedUserId, searchQuery, selectedStatus } = this.state;\n    const query = searchQuery.toLocaleLowerCase();\n    const visibleTodos = this.getTodosList(query);\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <input\n            type=\"text\"\n            id=\"search-query\"\n            placeholder=\"Type search word\"\n            value={searchQuery}\n            onChange={event => this.handleSearchQuery(event.target.value)}\n          />\n\n          <select\n            value={selectedStatus}\n            onChange={this.handleSelectedStatus}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n\n          <TodoList\n            todos={visibleTodos}\n            selectedUserId={selectedUserId}\n            onSelectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                onClearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}